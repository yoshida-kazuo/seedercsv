<?php
/**
 * Seeder class
 *
 * File name (eg : 2021_04_01_000001_users_table.csv
 * Csv file path : DummyCsvPath
 * Execution command : php artisan db:seed --class=\DummyNamespace\DummyClass --database=DummyConnection
 */
namespace DummyNamespace;

use Cerotechsys\Seedercsv\Services\Csv\ParseService;
use Illuminate\Database\Seeder as BaseSeeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Query\Grammars\MySqlGrammar;
use Illuminate\Database\Query\Grammars\PostgresGrammar;
use Illuminate\Database\Query\Grammars\SQLiteGrammar;
use Illuminate\Database\Query\Grammars\SqlServerGrammar;
use Exception;

class DummyClass extends BaseSeeder
{

    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $useCommand = 'DummyUseCommand';

        $truncate = 'DummyTruncate';
        $dir = database_path('DummyCsvPath');
        $files = glob("{$dir}/*.*");
        $tblSeed = 'seeds';

        $db = DB::connection('DummyConnection');
        $db->beginTransaction();

        try {
            $batchNumber = ($db->table($tblSeed)
                ->max('batch') ?? 0) + 1;

            foreach ($files as $file) {
                $table = preg_replace(
                    '/(^\d{4}_\d{2}_\d{2}_\d{6}_|_table\.csv$)/i',
                    '',
                    basename($file)
                );
                $data = (new ParseService($file, $useCommand))
                    ->create();

                if ($truncate === 'on') {

                    $targetTable = $db->table($table);

                    if (is_a($targetTable->getGrammar(), MySqlGrammar::class) === true) {
                        $targetTable->delete();
                    }

                    if (is_a($targetTable->getGrammar(), SQLiteGrammar::class) === true) {
                        $targetTable->delete();
                    }

                    if (is_a($targetTable->getGrammar(), PostgresGrammar::class) === true
                        || is_a($targetTable->getGrammar(), SqlServerGrammar::class) === true
                    ) {
                        $targetTable->truncate();
                    }

                }

                foreach ($data['data'] as $key => $value) {

                    foreach ($value as &$v) {
                        preg_match('/{`php:([^`]+)`}/i', $v, $matches);

                        if (isset($matches[1]) === true) {

                            if (str_ends_with($matches[1], ';') === false) {
                                $matches[1] .= ';';
                            }

                            eval("\$v = {$matches[1]}");
                        }

                    }

                    $targetTable = $db->table($table);

                    if ($useCommand === 'updateOrInsert') {
                        $targetTable->$useCommand(
                                $data['cond'][$key],
                                $value
                            );
                    } elseif ($useCommand === 'insert') {
                        $targetTable->$useCommand(
                                $value
                            );
                    } else {
                        throw new Exception('The command is incorrect.');
                    }

                }

                $dataSeed = collect([
                    'class'     => '\\'.__CLASS__,
                    'file'      => str_replace(storage_path('app'), '', $file),
                    'batch'     => $batchNumber,
                ]);

                if (! $db->table($tblSeed)
                    ->insert($dataSeed->toArray())
                ) {
                    throw new Exception("File {$tblSeed} : {$dataSeed->toJson()}");
                }
            }

            $db->commit();

        } catch(Exception $e) {
            $db->rollback();

            $this->command->error(
                $e->getMessage()
            );

            return false;
        }
    }

}
